{"version":3,"file":"static/js/268.5a13d16e.chunk.js","mappings":"qKAwBA,IArBmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,EAAOG,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CACEC,GACwB,MAAtBJ,EAASK,SAAT,iBAAsCF,EAAMG,IAA5C,UAAsDH,EAAMG,IAE9DC,MAAO,CAAEC,KAAMR,GAJjB,SAMGG,EAAMM,OAASN,EAAMO,QAPjBP,EAAMG,GADA,KActB,C,sICKD,EAvBkB,SAAC,GAAkB,IAAhBK,EAAe,EAAfA,SACnB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAYA,OACE,UAACC,EAAA,EAAD,CAAKC,GAAG,OAAOL,SAPI,SAAAM,GACnBA,EAAEC,iBACFP,EAASE,GACTC,EAAS,GACV,EAGC,WAEE,kBAAOK,KAAK,OAAOC,MAAOP,EAAOQ,SAbhB,SAAAJ,GACnBH,EAASG,EAAEK,OAAOF,MACnB,KAYG,mBAAQD,KAAK,SAAb,sBAIL,ECkBD,EArCe,WAAO,IAAD,EACnB,GAA4BP,EAAAA,EAAAA,UAAS,IAArC,eAAOb,EAAP,KAAewB,EAAf,KACA,GAA0BX,EAAAA,EAAAA,UAAS,MAAnC,eAAOY,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAW,UAAGF,EAAaG,IAAI,iBAApB,QAAiC,IAElDC,EAAAA,EAAAA,YAAU,WACHF,IAILG,EAAAA,EAAAA,IAAmBH,GAChBI,MAAK,SAAAC,GACCA,EAAKC,OAIVZ,EAAUW,GAHRT,EAAS,mBAIZ,IACAW,OAAM,SAAAZ,GAAK,OAAIC,EAAS,oBAAb,GACf,GAAE,CAACI,IAQJ,OACE,6BACE,SAAC,EAAD,CAAWlB,SARM,SAAAE,GACnBe,EAA0B,KAAVf,EAAe,CAAEwB,OAAQxB,GAAU,CAAC,GACpDU,EAAU,IACVE,EAAS,KACV,IAKID,IAAS,uBAAIA,IACbzB,EAAOoC,OAAS,IAAK,SAACG,EAAA,EAAD,CAAYvC,OAAQA,MAG/C,C","sources":["components/MoviesList/MoviesList.jsx","components/SearchBox/SearchBox.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <Link\n            to={\n              location.pathname === '/' ? `movies/${movie.id}` : `${movie.id}`\n            }\n            state={{ from: location }}\n          >\n            {movie.title || movie.name}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default MoviesList;\n\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    title: PropTypes.string,\n    id: PropTypes.number.isRequired,\n  })).isRequired,\n};\n","import { useState } from 'react';\nimport Box from 'components/base/Box/Box';\nimport PropTypes from 'prop-types';\n\nconst SearchBox = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const handleChange = e => {\n    setQuery(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <Box as=\"form\" onSubmit={handleSubmit}>\n    {/* <form onSubmit={handleSubmit}> */}\n      <input type=\"text\" value={query} onChange={handleChange}></input>\n      <button type=\"submit\">Search</button>\n    {/* </form> */}\n    </Box>\n  );\n};\n\nexport default SearchBox;\n\nSearchBox.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n}","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMoviesByQuery } from 'api/api';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport SearchBox from 'components/SearchBox/SearchBox';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const filterParam = searchParams.get('filter') ?? '';\n\n  useEffect(() => {\n    if (!filterParam) {\n      return;\n    }\n\n    fetchMoviesByQuery(filterParam)\n      .then(data => {\n        if (!data.length) {\n          setError('Nothing found =(');\n          return;\n        }\n        setMovies(data);\n      })\n      .catch(error => setError('Failed to load =('));\n  }, [filterParam]);\n\n  const handleSubmit = query => {\n    setSearchParams(query !== '' ? { filter: query } : {});\n    setMovies([]);\n    setError(null);\n  };\n\n  return (\n    <main>\n      <SearchBox onSubmit={handleSubmit} />\n      {error && <p>{error}</p>}\n      {movies.length > 0 && <MoviesList movies={movies} />}\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["movies","location","useLocation","map","movie","to","pathname","id","state","from","title","name","onSubmit","useState","query","setQuery","Box","as","e","preventDefault","type","value","onChange","target","setMovies","error","setError","useSearchParams","searchParams","setSearchParams","filterParam","get","useEffect","fetchMoviesByQuery","then","data","length","catch","filter","MoviesList"],"sourceRoot":""}